{"version":3,"file":"static/js/6.9f74bb10.chunk.js","mappings":"2VAkHA,EAxFkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACjBC,GAAwBC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACdI,EAAc,WAAH,OAASD,GAASD,EAAM,EAOzC,OACEG,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAEC,MAAM,SAASC,QAAQ,SAASC,GAAG,MAAKC,UAC7CL,EAAAA,EAAAA,KAACM,EAAAA,GAAG,CAAEC,UAAU,KAAIC,YAAY,OAAQC,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAIC,UAAU,UAASP,UACnFL,EAAAA,EAAAA,KAACa,EAAAA,GACC,CACAC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEbC,SAfc,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UAC9BC,QAAQC,IAAI,cAAcJ,GAC1B3B,GAASgC,EAAAA,EAAAA,IAAML,IACfE,GACF,EAW8Bf,SAErB,SAAAmB,GAAA,IAAGC,EAAYD,EAAZC,aAAcC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAAO,OAC/B3B,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CAACX,SAAUQ,EAAapB,UAC3BwB,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAAAzB,SAAA,EACLL,EAAAA,EAAAA,KAAC+B,EAAAA,EAAI,CAAC3B,GAAG,OAAM4B,GAAG,IAAG3B,SAAC,mBACtBwB,EAAAA,EAAAA,MAACI,EAAAA,GAAW,CAACC,YAAaR,EAAOX,OAASY,EAAQZ,MAAMV,SAAA,EACtDL,EAAAA,EAAAA,KAACmC,EAAAA,GAAK,CACJH,GAAII,EAAAA,EACJC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,QAAQ,SACRC,YAAY,SAEZC,SAAU,SAAAC,GACR,IAA4B,IAAxBA,EAAMC,QAAQ,KAChB,MAAO,2DAEX,KAEF5C,EAAAA,EAAAA,KAAC6C,EAAAA,GAAgB,CAAAxC,SAAEqB,EAAOX,YAG5Bc,EAAAA,EAAAA,MAACI,EAAAA,GAAW,CAACC,YAAaR,EAAOV,UAAYW,EAAQX,SAASX,SAAA,EAC5DwB,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,KAAK,KAAI1C,SAAA,EACnBL,EAAAA,EAAAA,KAACmC,EAAAA,GAAK,CACJa,GAAG,SACHhB,GAAII,EAAAA,EACJC,GAAG,WACHC,KAAK,WACLC,KAAM1C,EAAO,OAAS,WACtB2C,QAAQ,SACRC,YAAY,WAEZC,SAAU,SAAAC,GACR,GAAIA,EAAMM,OAAS,EACjB,MAAO,uCAEX,KAEFjD,EAAAA,EAAAA,KAACkD,EAAAA,EAAiB,CAACC,MAAM,SAAQ9C,UAC/BL,EAAAA,EAAAA,KAACoD,EAAAA,EAAM,CAACC,EAAE,UAAUN,KAAK,KAAKO,QAASvD,EAAYM,SAChDR,EAAO,OAAS,eAIvBG,EAAAA,EAAAA,KAAC6C,EAAAA,GAAgB,CAAAxC,SAAEqB,EAAOV,eAEdhB,EAAAA,EAAAA,KAACmC,EAAAA,GAAK,CAClBH,GAAIuB,EAAAA,EACJlB,GAAG,aACHC,KAAK,aACL9B,YAAY,OAAMH,SAEnB,kBAGDL,EAAAA,EAAAA,KAACoD,EAAAA,EAAM,CAAChD,GAAI,EAAGI,YAAY,OAAO+B,KAAK,SAAQlC,SAAC,eAI7C,OAMnB,EC3GA,EAJkB,WACd,OAAOL,EAAAA,EAAAA,KAACwD,EAAS,GAErB,C","sources":["components/LoginForm/LoginForm.jsx","components/Pages/LoginPage.jsx"],"sourcesContent":["import { Field, Form, Formik } from 'formik';\nimport {\n  Box,\n  Flex,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Text,\n  VStack,\n  Checkbox,\n} from '@chakra-ui/react';\n\n// import * as yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'reduxe/auth/auth-operation';\n\n// const schema = yup.object().shape({\n//   name: yup.string().min(3).required(),\n//   email: yup.string().email().required(),\n//   password: yup.string().min(8).required(),\n// });\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const handleSubmit = (values, { resetForm }) => {\n    console.log('valuesLogIn',values)\n    dispatch(logIn(values))\n    resetForm()\n  }\n\n  return (\n    <Flex  align=\"center\" justify=\"center\" mt=\"15%\" >\n      <Box  boxshadow='xl'colorscheme=\"teal\"  p={6} rounded=\"md\" w={80} boxShadow=\"dark-lg\">\n        <Formik\n          //   validationSchema={schema}\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n         onSubmit={handleSubmit}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <Form onSubmit={handleSubmit}>\n              <VStack>\n                <Text mt=\"10px\"as=\"b\">Welcome back!</Text>\n                <FormControl isInvalid={!!errors.email && touched.email}>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    placeholder=\"E-mail\"\n                    // autoComplete=\"off\"\n                    validate={value => {\n                      if (value.indexOf('@') === -1) {\n                        return 'Invalid email format. Please enter a valid email address.';\n                      }\n                    }}\n                  />\n                  <FormErrorMessage>{errors.email}</FormErrorMessage>\n                </FormControl>\n\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <InputGroup size=\"md\">\n                    <Field\n                      pr=\"4.5rem\"\n                      as={Input}\n                      id=\"password\"\n                      name=\"password\"\n                      type={show ? 'text' : 'password'}\n                      variant=\"filled\"\n                      placeholder=\"Password\"\n                      // autoComplete=\"off\"\n                      validate={value => {\n                        if (value.length < 6) {\n                          return 'Password should be over 6 characters.';\n                        }\n                      }}\n                    />\n                    <InputRightElement width=\"4.5rem\">\n                      <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                        {show ? 'Hide' : 'Show'}\n                      </Button>\n                    </InputRightElement>\n                  </InputGroup>\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                              </FormControl>\n                              <Field\n                  as={Checkbox}\n                  id=\"rememberMe\"\n                  name=\"rememberMe\"\n                  colorscheme=\"teal\"\n                  \n                >\n                  Remember me?\n                </Field>\n                <Button mt={4} colorscheme=\"teal\" type=\"submit\">\n                  Log In\n                </Button>\n              </VStack>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\nexport default LoginForm;\n","import LoginForm from \"components/LoginForm/LoginForm\"\nimport React from \"react\"\nconst LoginPage = () => {\n    return <LoginForm/>\n\n}\nexport default LoginPage"],"names":["dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","show","setShow","handleClick","_jsx","Flex","align","justify","mt","children","Box","boxshadow","colorscheme","p","rounded","w","boxShadow","Formik","initialValues","email","password","onSubmit","values","_ref","resetForm","console","log","logIn","_ref2","handleSubmit","errors","touched","Form","_jsxs","VStack","Text","as","FormControl","isInvalid","Field","Input","id","name","type","variant","placeholder","validate","value","indexOf","FormErrorMessage","InputGroup","size","pr","length","InputRightElement","width","Button","h","onClick","Checkbox","LoginForm"],"sourceRoot":""}