{"version":3,"file":"static/js/435.2967e053.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","Pages/RegisterPage.jsx"],"sourcesContent":["import { Field, Form, Formik } from 'formik';\nimport {\n  Box,\n  Flex,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Text,\n  VStack,\n  Checkbox,\n} from '@chakra-ui/react';\n\n// import * as yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../reduxe/auth/auth-operation';\n\n// const schema = yup.object().shape({\n//   name: yup.string().min(3).required(),\n//   email: yup.string().email().required(),\n//   password: yup.string().min(8).required(),\n// });\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  // const handleSubmit = (values, { resetForm }) => {\n  //   console.log(values);\n  //   dispatch(register(values));\n  //   resetForm();\n  // };\n\n  return (\n    <Flex align=\"center\" justify=\"center\" alignContent=\"center\" justifyContent=\"center\" >\n      <Box boxshadow=\"xl\" colorscheme=\"teal\" p={6} rounded=\"md\" w={80} boxShadow=\"dark-lg\">\n        <Formik\n          //   validationSchema={schema}\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          onSubmit={(values, { resetForm }) => {\n            console.log(\"values reg\", values);\n            dispatch(register({\n              name: values.name.trim(),\n              email: values.email.trim(),\n            password: values.password.trim(),\n            }));\n            resetForm();\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <Form onSubmit={handleSubmit}>\n              <VStack>\n                <Text mt=\"10px\" as=\"b\">\n                  Let's create your account\n                </Text>\n                <FormControl isInvalid={!!errors.name && touched.name}>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"name\"\n                    placeholder=\"Your name\"\n                    variant=\"filled\"\n                    autoComplete=\"off\"\n                    validate={value => {\n                      if (value.length < 3) {\n                        return 'Name should be over 3 characters.';\n                      }\n                    }}\n                  />\n                  <FormErrorMessage>{errors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={!!errors.email && touched.email}>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    placeholder=\"E-mail\"\n                    autoComplete=\"off\"\n                    validate={value => {\n                      if (value.indexOf('@') === -1) {\n                        return 'Invalid email format. Please enter a valid email address.';\n                      }\n                    }}\n                  />\n                  <FormErrorMessage>{errors.email}</FormErrorMessage>\n                </FormControl>\n\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <InputGroup size=\"md\">\n                    <Field\n                      pr=\"4.5rem\"\n                      as={Input}\n                      id=\"password\"\n                      name=\"password\"\n                      type={show ? 'text' : 'password'}\n                      variant=\"filled\"\n                      placeholder=\"Password\"\n                      autoComplete=\"off\"\n                      validate={value => {\n                        if (value.length < 6) {\n                          return 'Password should be over 6 characters.';\n                        }\n                      }}\n                    />\n                    <InputRightElement width=\"4.5rem\">\n                      <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                        {show ? 'Hide' : 'Show'}\n                      </Button>\n                    </InputRightElement>\n                  </InputGroup>\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                <Field\n                  as={Checkbox}\n                  id=\"rememberMe\"\n                  name=\"rememberMe\"\n                  colorscheme=\"teal\"\n                >\n                  Remember me?\n                </Field>\n                <Button mt={4} colorscheme=\"teal\" type=\"submit\">\n                  Sign Up\n                </Button>\n              </VStack>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\nexport default RegisterForm;\n\n// poi\n// poi @g.com\n// poipoipoi\n","import RegisterForm from \"components/RegisterForm/RegisterForm\"\n\nconst RegisterPage = () => {\n    return <RegisterForm/>\n\n}\nexport default RegisterPage"],"names":["dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","show","setShow","handleClick","_jsx","Flex","align","justify","alignContent","justifyContent","children","Box","boxshadow","colorscheme","p","rounded","w","boxShadow","Formik","initialValues","name","email","password","onSubmit","values","_ref","resetForm","console","log","register","trim","_ref2","handleSubmit","errors","touched","Form","_jsxs","VStack","Text","mt","as","FormControl","isInvalid","Field","Input","id","type","placeholder","variant","autoComplete","validate","value","length","FormErrorMessage","indexOf","InputGroup","size","pr","InputRightElement","width","Button","h","onClick","Checkbox","RegisterForm"],"sourceRoot":""}